//_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro
//_\source top.tlv 35

//_\SV
   // Include Tiny Tapeout Lab.
   // Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlv_lib/tiny_tapeout_lib.tlv"// Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlv_lib/fpga_includes.tlv"
//_\source top.tlv 131
//_\SV

// ================================================
// A simple Makerchip Verilog test bench driving random stimulus.
// Modify the module contents to your needs.
// ================================================

module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);
   // Tiny tapeout I/O signals.
   logic [7:0] ui_in, uo_out;
   logic [7:0] uio_in, uio_out, uio_oe;
   logic [31:0] r;  // a random value
   always @(posedge clk) r <= 0;
   //assign ui_in = r[7:0];
   assign uio_in = 8'b0;
   logic ena = 1'b0;
   logic rst_n = ! reset;
   integer i;

   // Or, to provide specific inputs at specific times (as for lab C-TB) ...
   // BE SURE TO COMMENT THE ASSIGNMENT OF INPUTS ABOVE.
   // BE SURE TO DRIVE THESE ON THE B-PHASE OF THE CLOCK (ODD STEPS).
   // Driving on the rising clock edge creates a race with the clock that has unpredictable simulation behavior.
   initial begin
      #1  // Drive inputs on the B-phase.
         ui_in = 8'h0;
      #10 // Step 5 cycles, past reset.
         ui_in = 8'hFF;
      #2
      // Testing Sender
      // Set Mode to Sender and clear inputs
         ui_in[7:0] = 8'b0000_0000;

      // Test Single Inputs
      for ( i = 0 ; i < 4; i++ ) begin
            ui_in[6:0] = 7'b000_0000;
            #40
         	ui_in[i] = 1'b1;
            //ui_in[0] = 1'b1;
            #40
         ;
      end

      // Test Double Inputs

      ui_in[6:0] = 7'b000_0000;
      #4
      ui_in[6:0] = 7'b100_0011;
      #4
      ui_in[6:0] = 7'b000_0000;
      #4
      ui_in[6:0] = 7'b100_0101;
      #4
      ui_in[6:0] = 7'b000_0000;
      #4
      ui_in[6:0] = 7'b100_1010;
      #4
      ui_in[6:0] = 7'b000_0000;
      #4
      ui_in[6:0] = 7'b100_1001;

      // Testing Reciever
      ui_in[7:0] = 8'b1000_0000;
      // Test Single Inputs
      for ( i = 0 ; i < 4; i++ ) begin
            ui_in[6:0] = 7'b000_0000;
            #40
         	ui_in[i + 1] = 1'b1;
            ui_in[0] = 1'b1;
            #40
         ;
      end

      // Test Double Inputs

      ui_in[4:0] = 5'b00000;
      #4
      ui_in[4:0] = 5'b00111;
      #4
      ui_in[4:0] = 5'b00000;
      #4
      ui_in[4:0] = 5'b01011;
      #4
      ui_in[4:0] = 5'b00000;
      #4
      ui_in[4:0] = 5'b1010_1;
      #4
      ui_in[4:0] = 5'b0000_0;
      #4
      ui_in[4:0] = 5'b1001_1;

   end


   // Instantiate the Tiny Tapeout module.
   my_design tt(.*);

   assign passed = top.cyc_cnt > 600;
   assign failed = 1'b0;
endmodule


// Provide a wrapper module to debounce input signals if requested.
// The Tiny Tapeout top-level module.
// This simply debounces and synchronizes inputs.
// Debouncing is based on a counter. A change to any input will only be recognized once ALL inputs
// are stable for a certain duration. This approach uses a single counter vs. a counter for each
// bit.
module tt_um_The_Chairman_send_receive (
    input  wire [7:0] ui_in,    // Dedicated inputs - connected to the input switches
    output wire [7:0] uo_out,   // Dedicated outputs - connected to the 7 segment display
       // The FPGA is based on TinyTapeout 3 which has no bidirectional I/Os (vs. TT6 for the ASIC).
    input  wire [7:0] uio_in,   // IOs: Bidirectional Input path
    output wire [7:0] uio_out,  // IOs: Bidirectional Output path
    output wire [7:0] uio_oe,   // IOs: Bidirectional Enable path (active high: 0=input, 1=output)
    
    input  wire       ena,      // will go high when the design is enabled
    input  wire       clk,      // clock
    input  wire       rst_n     // reset_n - low to reset
);
    
    // Synchronize.
    logic [17:0] inputs_ff, inputs_sync;
    always @(posedge clk) begin
        inputs_ff <= {ui_in, uio_in, ena, rst_n};
        inputs_sync <= inputs_ff;
    end

    // Debounce.
    `define DEBOUNCE_MAX_CNT 14'h3fff
    logic [17:0] inputs_candidate, inputs_captured;
    logic sync_rst_n = inputs_sync[0];
    logic [13:0] cnt;
    always @(posedge clk) begin
        if (!sync_rst_n)
           cnt <= `DEBOUNCE_MAX_CNT;
        else if (inputs_sync != inputs_candidate) begin
           // Inputs changed before stablizing.
           cnt <= `DEBOUNCE_MAX_CNT;
           inputs_candidate <= inputs_sync;
        end
        else if (cnt > 0)
           cnt <= cnt - 14'b1;
        else begin
           // Cnt == 0. Capture candidate inputs.
           inputs_captured <= inputs_candidate;
        end
    end
    logic [7:0] clean_ui_in, clean_uio_in;
    logic clean_ena, clean_rst_n;
    assign {clean_ui_in, clean_uio_in, clean_ena, clean_rst_n} = inputs_captured;

    my_design my_design (
        .ui_in(clean_ui_in),
        .uio_in(clean_uio_in),
        .ena(clean_ena),
        .rst_n(clean_rst_n),
        .*);
endmodule
//_\SV



// =======================
// The Tiny Tapeout module
// =======================

module my_design (
    input  wire [7:0] ui_in,    // Dedicated inputs - connected to the input switches
    output wire [7:0] uo_out,   // Dedicated outputs - connected to the 7 segment display
       // The FPGA is based on TinyTapeout 3 which has no bidirectional I/Os (vs. TT6 for the ASIC).
    input  wire [7:0] uio_in,   // IOs: Bidirectional Input path
    output wire [7:0] uio_out,  // IOs: Bidirectional Output path
    output wire [7:0] uio_oe,   // IOs: Bidirectional Enable path (active high: 0=input, 1=output)
    
    input  wire       ena,      // will go high when the design is enabled
    input  wire       clk,      // clock
    input  wire       rst_n     // reset_n - low to reset
);
   wire reset = ! rst_n;

// ---------- Generated Code Inlined Here (before 1st \TLV) ----------
// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// (Installed here: /usr/local/mono/sandpiper/distro.)
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


genvar digit, input_label, leds, switch;


//
// Signals declared top-level.
//

// For $slideswitch.
wire [7:0] L0_slideswitch_a0;

// For $sseg_decimal_point_n.
wire L0_sseg_decimal_point_n_a0;

// For $sseg_digit_n.
wire [7:0] L0_sseg_digit_n_a0;

// For $sseg_segment_n.
wire [6:0] L0_sseg_segment_n_a0;

// For /fpga_pins/fpga|receiver$data.
wire [3:0] FpgaPins_Fpga_RECEIVER_data_a0;

// For /fpga_pins/fpga|receiver$dec.
wire FpgaPins_Fpga_RECEIVER_dec_a0;
reg  FpgaPins_Fpga_RECEIVER_dec_a1;

// For /fpga_pins/fpga|receiver$invalid_input.
wire FpgaPins_Fpga_RECEIVER_invalid_input_a0;

// For /fpga_pins/fpga|receiver$rec_in_valid.
wire FpgaPins_Fpga_RECEIVER_rec_in_valid_a0;

// For /fpga_pins/fpga|receiver$receiver.
wire FpgaPins_Fpga_RECEIVER_receiver_a0;

// For /fpga_pins/fpga|receiver$recv_out.
wire [7:0] FpgaPins_Fpga_RECEIVER_recv_out_a0;
reg  [7:0] FpgaPins_Fpga_RECEIVER_recv_out_a1;

// For /fpga_pins/fpga|receiver$reset.
wire FpgaPins_Fpga_RECEIVER_reset_a0;

// For /fpga_pins/fpga|sender$an_input.
wire FpgaPins_Fpga_SENDER_an_input_a0;

// For /fpga_pins/fpga|sender$counter.
wire [11:0] FpgaPins_Fpga_SENDER_counter_a0;
reg  [11:0] FpgaPins_Fpga_SENDER_counter_a1;

// For /fpga_pins/fpga|sender$do_send.
wire FpgaPins_Fpga_SENDER_do_send_a0;
reg  FpgaPins_Fpga_SENDER_do_send_a1,
     FpgaPins_Fpga_SENDER_do_send_a2,
     FpgaPins_Fpga_SENDER_do_send_a3,
     FpgaPins_Fpga_SENDER_do_send_a4,
     FpgaPins_Fpga_SENDER_do_send_a5,
     FpgaPins_Fpga_SENDER_do_send_a6,
     FpgaPins_Fpga_SENDER_do_send_a7,
     FpgaPins_Fpga_SENDER_do_send_a8,
     FpgaPins_Fpga_SENDER_do_send_a9,
     FpgaPins_Fpga_SENDER_do_send_a10;

// For /fpga_pins/fpga|sender$do_send_out.
wire FpgaPins_Fpga_SENDER_do_send_out_a10;

// For /fpga_pins/fpga|sender$in.
wire [6:0] FpgaPins_Fpga_SENDER_in_a0;

// For /fpga_pins/fpga|sender$reset.
wire FpgaPins_Fpga_SENDER_reset_a0;

// For /fpga_pins/fpga|sender$send_out.
wire [4:1] FpgaPins_Fpga_SENDER_send_out_a0;

// For /fpga_pins/fpga|sender$sender.
wire FpgaPins_Fpga_SENDER_sender_a0;
reg  FpgaPins_Fpga_SENDER_sender_a1,
     FpgaPins_Fpga_SENDER_sender_a2,
     FpgaPins_Fpga_SENDER_sender_a3,
     FpgaPins_Fpga_SENDER_sender_a4,
     FpgaPins_Fpga_SENDER_sender_a5,
     FpgaPins_Fpga_SENDER_sender_a6,
     FpgaPins_Fpga_SENDER_sender_a7,
     FpgaPins_Fpga_SENDER_sender_a8,
     FpgaPins_Fpga_SENDER_sender_a9,
     FpgaPins_Fpga_SENDER_sender_a10;




   //
   // Scope: /fpga_pins
   //


      //
      // Scope: /fpga
      //


         //
         // Scope: |receiver
         //

            // Staging of $dec.
            always @(posedge clk) FpgaPins_Fpga_RECEIVER_dec_a1 <= FpgaPins_Fpga_RECEIVER_dec_a0;

            // Staging of $recv_out.
            always @(posedge clk) FpgaPins_Fpga_RECEIVER_recv_out_a1[7:0] <= FpgaPins_Fpga_RECEIVER_recv_out_a0[7:0];



         //
         // Scope: |sender
         //

            // Staging of $counter.
            always @(posedge clk) FpgaPins_Fpga_SENDER_counter_a1[11:0] <= FpgaPins_Fpga_SENDER_counter_a0[11:0];

            // Staging of $do_send.
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a1 <= FpgaPins_Fpga_SENDER_do_send_a0;
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a2 <= FpgaPins_Fpga_SENDER_do_send_a1;
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a3 <= FpgaPins_Fpga_SENDER_do_send_a2;
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a4 <= FpgaPins_Fpga_SENDER_do_send_a3;
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a5 <= FpgaPins_Fpga_SENDER_do_send_a4;
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a6 <= FpgaPins_Fpga_SENDER_do_send_a5;
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a7 <= FpgaPins_Fpga_SENDER_do_send_a6;
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a8 <= FpgaPins_Fpga_SENDER_do_send_a7;
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a9 <= FpgaPins_Fpga_SENDER_do_send_a8;
            always @(posedge clk) FpgaPins_Fpga_SENDER_do_send_a10 <= FpgaPins_Fpga_SENDER_do_send_a9;

            // Staging of $sender.
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a1 <= FpgaPins_Fpga_SENDER_sender_a0;
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a2 <= FpgaPins_Fpga_SENDER_sender_a1;
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a3 <= FpgaPins_Fpga_SENDER_sender_a2;
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a4 <= FpgaPins_Fpga_SENDER_sender_a3;
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a5 <= FpgaPins_Fpga_SENDER_sender_a4;
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a6 <= FpgaPins_Fpga_SENDER_sender_a5;
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a7 <= FpgaPins_Fpga_SENDER_sender_a6;
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a8 <= FpgaPins_Fpga_SENDER_sender_a7;
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a9 <= FpgaPins_Fpga_SENDER_sender_a8;
            always @(posedge clk) FpgaPins_Fpga_SENDER_sender_a10 <= FpgaPins_Fpga_SENDER_sender_a9;








//
// Debug Signals
//

generate

   if (1) begin : DEBUG_SIGS_GTKWAVE

      (* keep *) wire [7:0] \@0$slideswitch ;
      assign \@0$slideswitch = L0_slideswitch_a0;
      (* keep *) wire  \@0$sseg_decimal_point_n ;
      assign \@0$sseg_decimal_point_n = L0_sseg_decimal_point_n_a0;
      (* keep *) wire [7:0] \@0$sseg_digit_n ;
      assign \@0$sseg_digit_n = L0_sseg_digit_n_a0;
      (* keep *) wire [6:0] \@0$sseg_segment_n ;
      assign \@0$sseg_segment_n = L0_sseg_segment_n_a0;

      //
      // Scope: /digit[0:0]
      //
      for (digit = 0; digit <= 0; digit=digit+1) begin : \/digit 

         //
         // Scope: /leds[7:0]
         //
         for (leds = 0; leds <= 7; leds=leds+1) begin : \/leds 
            (* keep *) wire  \//@0$viz_lit ;
            assign \//@0$viz_lit = L1_Digit[digit].L2_Leds[leds].L2_viz_lit_a0;
         end
      end

      //
      // Scope: /fpga_pins
      //
      if (1) begin : \/fpga_pins 

         //
         // Scope: /fpga
         //
         if (1) begin : \/fpga 

            //
            // Scope: |receiver
            //
            if (1) begin : P_receiver
               (* keep *) wire [3:0] \///?$receiver@0$data ;
               assign \///?$receiver@0$data = FpgaPins_Fpga_RECEIVER_data_a0;
               (* keep *) wire  \///?$receiver@0$dec ;
               assign \///?$receiver@0$dec = FpgaPins_Fpga_RECEIVER_dec_a0;
               (* keep *) wire  \///?$receiver@0$invalid_input ;
               assign \///?$receiver@0$invalid_input = FpgaPins_Fpga_RECEIVER_invalid_input_a0;
               (* keep *) wire  \///?$receiver@0$rec_in_valid ;
               assign \///?$receiver@0$rec_in_valid = FpgaPins_Fpga_RECEIVER_rec_in_valid_a0;
               (* keep *) wire  \///@0$receiver ;
               assign \///@0$receiver = FpgaPins_Fpga_RECEIVER_receiver_a0;
               (* keep *) wire [7:0] \///?$receiver@0$recv_out ;
               assign \///?$receiver@0$recv_out = FpgaPins_Fpga_RECEIVER_recv_out_a0;
               (* keep *) wire  \///?$receiver@0$reset ;
               assign \///?$receiver@0$reset = FpgaPins_Fpga_RECEIVER_reset_a0;
            end

            //
            // Scope: |sender
            //
            if (1) begin : P_sender
               (* keep *) wire  \///?$sender@0$an_input ;
               assign \///?$sender@0$an_input = FpgaPins_Fpga_SENDER_an_input_a0;
               (* keep *) wire [11:0] \///?$sender@0$counter ;
               assign \///?$sender@0$counter = FpgaPins_Fpga_SENDER_counter_a0;
               (* keep *) wire  \///?$sender@0$do_send ;
               assign \///?$sender@0$do_send = FpgaPins_Fpga_SENDER_do_send_a0;
               (* keep *) wire  \///?$sender@10$do_send_out ;
               assign \///?$sender@10$do_send_out = FpgaPins_Fpga_SENDER_do_send_out_a10;
               (* keep *) wire [6:0] \///?$sender@0$in ;
               assign \///?$sender@0$in = FpgaPins_Fpga_SENDER_in_a0;
               (* keep *) wire  \///@0$reset ;
               assign \///@0$reset = FpgaPins_Fpga_SENDER_reset_a0;
               (* keep *) wire [4:1] \///?$sender@0$send_out ;
               assign \///?$sender@0$send_out = FpgaPins_Fpga_SENDER_send_out_a0;
               (* keep *) wire  \///@0$sender ;
               assign \///@0$sender = FpgaPins_Fpga_SENDER_sender_a0;
            end
         end
      end

      //
      // Scope: /switch[7:0]
      //
      for (switch = 0; switch <= 7; switch=switch+1) begin : \/switch 
         (* keep *) wire  \/@0$viz_switch ;
         assign \/@0$viz_switch = L1_Switch[switch].L1_viz_switch_a0;
      end


   end

endgenerate

// ---------- Generated Code Ends ----------
//_\TLV
   /* verilator lint_off UNOPTFLAT */
   //_\source top.tlv 124   // Instantiated from top.tlv, 260 as: m5+tt_lab.
      // Connect Tiny Tapeout I/Os to Virtual FPGA Lab.
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlvlib/tinytapeoutlib.tlv 76   // Instantiated from top.tlv, 126 as: m5+tt_connections()
         assign L0_slideswitch_a0[7:0] = ui_in;
         assign L0_sseg_segment_n_a0[6:0] = ~ uo_out[6:0];
         assign L0_sseg_decimal_point_n_a0 = ~ uo_out[7];
         assign L0_sseg_digit_n_a0[7:0] = 8'b11111110;
      //_\end_source
      // Instantiate the Virtual FPGA Lab.
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 307   // Instantiated from top.tlv, 128 as: m5+board(/top, /fpga, 7, $, , my_design)
         
         //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 355   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 309 as: m4+thanks(m5__l(309)m5_eval(m5_get(BOARD_THANKS_ARGS)))
            //_/thanks
               
         //_\end_source
         
      
         // Board VIZ.
      
         // Board Image.
         
         //_/fpga_pins
            
            //_/fpga
               //_\source top.tlv 41   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 340 as: m4+my_design.
               
               
               
                  // ==================
                  // |                |
                  // | YOUR CODE HERE |
                  // |                |
                  // ==================
               
                  // Note that pipesignals assigned here can be found under /fpga_pins/fpga.
               
               
               
                  //_|sender
                     //_@0
                        assign FpgaPins_Fpga_SENDER_sender_a0 = ! ui_in[7];
                        assign FpgaPins_Fpga_SENDER_reset_a0 = reset;
               
                     //_?$sender
                        //_@0
                           //*uo_out[7] = 1'b1;
               
                           assign FpgaPins_Fpga_SENDER_in_a0[6:0] = ui_in[6:0];
               
                           assign FpgaPins_Fpga_SENDER_an_input_a0 = FpgaPins_Fpga_SENDER_in_a0[0] || FpgaPins_Fpga_SENDER_in_a0[1] || FpgaPins_Fpga_SENDER_in_a0[2] || FpgaPins_Fpga_SENDER_in_a0[3];
                           assign FpgaPins_Fpga_SENDER_counter_a0[11:0] = FpgaPins_Fpga_SENDER_reset_a0 ? 12'b0 :
                              FpgaPins_Fpga_SENDER_an_input_a0 ? FpgaPins_Fpga_SENDER_counter_a1 + {10'b0,~FpgaPins_Fpga_SENDER_counter_a1[10]} :
                                 12'b0;
               
                           //$do_send =  $counter[11] && !>>1$counter[11] ;
                           assign FpgaPins_Fpga_SENDER_do_send_a0 =  FpgaPins_Fpga_SENDER_counter_a0 > FpgaPins_Fpga_SENDER_counter_a1;
                           //$send_out[7:0] = {5'b1000, $in[3:0], 1'b1};
                           assign FpgaPins_Fpga_SENDER_send_out_a0[4:1] = FpgaPins_Fpga_SENDER_in_a0[3:0];
                        //_@10
                           assign FpgaPins_Fpga_SENDER_do_send_out_a10 = FpgaPins_Fpga_SENDER_do_send_a10;
               
                  //_|receiver
                     //_@0
                        assign FpgaPins_Fpga_RECEIVER_receiver_a0 = ui_in[7];
               
                     //_?$receiver
                        //_@0
                           assign FpgaPins_Fpga_RECEIVER_dec_a0 = ui_in[0];
                           assign FpgaPins_Fpga_RECEIVER_data_a0[3:0] = ui_in[4:1];
                           assign FpgaPins_Fpga_RECEIVER_reset_a0 = reset;
                           assign FpgaPins_Fpga_RECEIVER_rec_in_valid_a0 = ((FpgaPins_Fpga_RECEIVER_dec_a1 == 0) && (FpgaPins_Fpga_RECEIVER_dec_a0 == 1));
                           assign FpgaPins_Fpga_RECEIVER_invalid_input_a0 = ( {{3'b0},FpgaPins_Fpga_RECEIVER_data_a0[3]} + {{3'b0},FpgaPins_Fpga_RECEIVER_data_a0[2]} + {{3'b0},FpgaPins_Fpga_RECEIVER_data_a0[1]} + {{3'b0},FpgaPins_Fpga_RECEIVER_data_a0[0]}) > 4'b1;
               
                           assign FpgaPins_Fpga_RECEIVER_recv_out_a0[7:0] =
                               FpgaPins_Fpga_RECEIVER_reset_a0 ? 8'b010_00000 :
                               ! FpgaPins_Fpga_RECEIVER_rec_in_valid_a0 ? FpgaPins_Fpga_RECEIVER_recv_out_a1 :
                               FpgaPins_Fpga_RECEIVER_invalid_input_a0 ? 8'b0111_1001 :
                               FpgaPins_Fpga_RECEIVER_data_a0[0] ? 8'b0000_0110 :
                               FpgaPins_Fpga_RECEIVER_data_a0[1] ? 8'b0101_1011 :
                               FpgaPins_Fpga_RECEIVER_data_a0[2] ? 8'b0110_0110 :
                               // Default
                                          8'b0111_1111 ;
               
                  //_|output
                     //_@0
                        assign uo_out[7:0] = FpgaPins_Fpga_SENDER_sender_a0 ?
                            {3'b100,FpgaPins_Fpga_SENDER_send_out_a0[4:1],FpgaPins_Fpga_SENDER_do_send_out_a10} :
                            FpgaPins_Fpga_RECEIVER_recv_out_a0;
                  /*
                  |timing
                     @0
                        $reset = *reset;
                        $timer[7:0] =
                           $reset ? 8'b0 :
                           $timer[7:0] < 8'b1111_1111 ? >>1$timer[7:0] + 8'b1 : 8'b0 ;
                  */
               
               
               
               
               
               
                  // Connect Tiny Tapeout outputs. Note that uio_ outputs are not available in the Tiny-Tapeout-3-based FPGA boards.
                  assign uio_out = 8'b0;
                  assign uio_oe = 8'b0;
               //_\end_source
      
         // LEDs.
         
      
         // 7-Segment
         //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 395   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 346 as: m4+fpga_sseg.
            generate for (digit = 0; digit <= 0; digit=digit+1) begin : L1_Digit //_/digit
               
               for (leds = 0; leds <= 7; leds=leds+1) begin : L2_Leds //_/leds

                  // For $viz_lit.
                  wire L2_viz_lit_a0;

                  assign L2_viz_lit_a0 = (! L0_sseg_digit_n_a0[digit]) && ! ((leds == 7) ? L0_sseg_decimal_point_n_a0 : L0_sseg_segment_n_a0[leds % 7]);
                  
               end
            end endgenerate
         //_\end_source
      
         // slideswitches
         //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 454   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 349 as: m4+fpga_switch.
            generate for (switch = 0; switch <= 7; switch=switch+1) begin : L1_Switch //_/switch

               // For $viz_switch.
               wire L1_viz_switch_a0;

               assign L1_viz_switch_a0 = L0_slideswitch_a0[switch];
               
            end endgenerate
         //_\end_source
      
         // pushbuttons
         
      //_\end_source
      // Label the switch inputs [0..7] (1..8 on the physical switch panel) (top-to-bottom).
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlvlib/tinytapeoutlib.tlv 82   // Instantiated from top.tlv, 130 as: m5+tt_input_labels_viz(⌈"UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED"⌉)
         generate for (input_label = 0; input_label <= 7; input_label=input_label+1) begin : L1_InputLabel //_/input_label
            
         end endgenerate
      //_\end_source
   
   //_\end_source

/*SV_plus*/

   // ==========================================
   // If you are using Verilog for your design,
   // your Verilog logic goes here.
   // Note, output assignments are in my_design.
   // ==========================================

//_\SV
endmodule


// Undefine macros defined by SandPiper.
`undef BOGUS_USE
